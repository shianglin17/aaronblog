# 程式碼規範

## 1. 命名規範

### 檔案命名
- 使用小寫字母
- 使用連字符（-）作為單詞分隔符
- 例如：`user-profile-controller.php`

### 類別命名
- 使用 PascalCase
- 例如：`UserProfileController`

### 方法命名
- 使用 camelCase
- 動詞開頭
- 例如：`getUserProfile()`

### 變數命名
- 使用 camelCase
- 例如：`$userProfile`

### 常數命名
- 使用大寫字母
- 使用底線（_）作為單詞分隔符
- 例如：`MAX_USER_COUNT`

## 2. 程式碼風格

### 縮排
- 使用 4 個空格
- 不使用 Tab

### 行長度
- 每行不超過 120 個字符

### 註解
- 使用 PHPDoc 格式
- 類別和方法必須有註解
- 複雜的邏輯必須有行內註解

### 空行
- 類別和方法之間必須有空行
- 相關的程式碼塊之間可以有空行
- 不相關的程式碼塊之間必須有空行

## 3. 資料庫規範

### 表格命名
- 使用小寫字母
- 使用底線（_）作為單詞分隔符
- 使用複數形式
- 例如：`user_profiles`

### 欄位命名
- 使用小寫字母
- 使用底線（_）作為單詞分隔符
- 例如：`created_at`

## 4. Git 提交規範

### 提交訊息格式
```
<type>(<scope>): <subject>

<body>

<footer>
```

### 類型（type）
- feat: 新功能
- fix: 修復 bug
- docs: 文檔更新
- style: 程式碼格式調整
- refactor: 重構
- test: 測試相關
- chore: 建構過程或輔助工具的變動

## 5. 安全性規範

### 輸入驗證
- 所有使用者輸入必須驗證
- 使用 Laravel 的驗證機制

### 資料庫操作
- 使用查詢建構器或 Eloquent
- 避免直接使用原生 SQL
- 使用參數綁定

### 密碼處理
- 使用 Laravel 的 Hash 機制
- 不儲存明文密碼

## 6. 測試規範

### 單元測試
- 所有新功能必須有單元測試
- 測試覆蓋率至少 80%

### 測試命名
- 使用 `test` 前綴
- 描述測試的目的
- 例如：`testUserCanLoginWithValidCredentials`

## 7. 效能規範

### 資料庫查詢
- 避免 N+1 問題
- 使用 eager loading
- 適當使用索引

### 快取
- 適當使用快取機制
- 快取鍵必須有命名空間

## 8. 錯誤處理

### 例外處理
- 使用自定義例外類別
- 適當記錄錯誤日誌
- 不向使用者顯示詳細錯誤訊息

## 9. 文件規範

### API 文件
- 使用 OpenAPI/Swagger 格式
- 必須包含請求/回應範例
- 必須包含錯誤碼說明

### 程式碼文件
- 使用 PHPDoc 格式
- 必須包含參數和回傳值說明
- 複雜邏輯必須有註解

## 10. 需求文件規範

### PRD 撰寫原則
- 所有需求必須來自實際業務需求
- 禁止憑空想像或假設需求
- 每個需求必須有明確的來源和依據
- 需求必須經過相關利益關係人確認
- 需求必須有明確的驗收標準

### 需求文件結構
1. 需求來源
   - 業務需求
   - 用戶訪談
   - 市場調研
   - 競品分析

2. 需求描述
   - 具體功能
   - 使用場景
   - 預期效果

3. 驗收標準
   - 功能驗收
   - 效能驗收
   - 安全性驗收

4. 優先級別
   - 必須功能
   - 重要功能
   - 可有可無功能

5. 風險評估
   - 技術風險
   - 業務風險
   - 時程風險

## 11. 專案開發規範

### 學習導向原則
1. 開發步調
   - 以學習為最高準則
   - 每個步驟都要充分理解
   - 不追求快速完成
   - 確保完全掌握每個細節

2. 程式碼修改規範
   - 禁止未經授權的程式碼修改
   - 禁止未經授權的程式碼新增
   - 禁止未經授權的程式碼刪除
   - 所有程式碼變更必須經過確認

3. 學習重點
   - 理解每個程式碼的緣由
   - 掌握技術選擇的原因
   - 了解架構設計的考量
   - 熟悉最佳實踐的應用

4. 開發流程
   - 每個功能都要充分討論
   - 每個決策都要有明確理由
   - 每個實作都要有完整說明
   - 每個變更都要有充分解釋

5. 文件要求
   - 詳細記錄開發過程
   - 說明技術選擇原因
   - 記錄遇到的問題和解決方案
   - 總結學習心得 