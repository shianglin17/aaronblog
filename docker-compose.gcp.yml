# GCP 部署環境配置
# 使用方式: docker-compose -f docker-compose.gcp.yml up -d
# 特色：使用 SQLite，節省資源，適合 GCP 免費層

# SQLite Volume 配置選項說明：
# 
# 選項 1：持久化資料（生產環境建議）- 目前配置
#   volumes: [sqlite-data:/var/www/database]
#   優點：容器重啟後資料保留，適合生產環境
#   缺點：需要管理 Docker volume
#
# 選項 2：臨時資料（開發測試環境）
#   volumes: [] # 移除 volume 掛載
#   優點：配置簡單，每次重啟都是乾淨環境
#   缺點：資料不會保留，容器重啟後需重新初始化
#
# 選項 3：綁定掛載（本地開發）
#   volumes: [./database:/var/www/database]
#   優點：直接存取宿主機檔案，方便備份和檢查
#   缺點：路徑依賴，不適合雲端部署

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: aaronblog-app:latest
    container_name: aaronblog-app
    env_file:
      - .env
    volumes:
      # GCP 環境只掛載 SQLite 資料庫檔案
      - sqlite-data:/var/www/database
    environment:
      - APP_DEBUG=false
      - APP_ENV=production
      - DB_CONNECTION=sqlite
      - DB_DATABASE=/var/www/database/database.sqlite
    # 記憶體限制，適合免費層 VM (1GB RAM)
    mem_limit: 512m
    mem_reservation: 256m
    restart: unless-stopped
    # 移除對 MySQL 的依賴
    depends_on: []
    networks:
      - aaronblog-net
    healthcheck:
      test: ["CMD", "php", "artisan", "tinker", "--execute=echo 'OK';"]
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 60s

  nginx:
    image: nginx:alpine
    container_name: aaronblog-nginx
    ports:
      - "80:80"    # 生產環境使用標準端口
      - "443:443"  # 支援 HTTPS
    volumes:
      # 只掛載 nginx 配置
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - aaronblog-net
    # 記憶體限制
    mem_limit: 128m
    mem_reservation: 64m
    restart: unless-stopped

  # MySQL 服務已移除，使用 SQLite

volumes:
  sqlite-data:
    driver: local

networks:
  aaronblog-net:
    driver: bridge 