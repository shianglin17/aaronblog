name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允許手動觸發

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    # 添加 Redis 服務
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, json, curl, zip, pdo, sqlite, pdo_sqlite, redis
          tools: composer:v2
      
      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      
      - name: Install PHP dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      
      - name: Generate key
        run: php artisan key:generate
      
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      
      - name: Create SQLite database
        run: |
          mkdir -p database
          touch database/database.sqlite
      
      - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
        run: php artisan test --testsuite=Feature
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
          CACHE_STORE: redis
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: null
          REDIS_DATABASE: 0

  build-frontend:
    name: Build Frontend Assets
    needs: test
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install frontend dependencies
        run: npm ci
      
      - name: Build frontend assets
        run: npm run build
      
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: public/build/
          retention-days: 1

  build-docker:
    name: Build/Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: aaronlei17/aaronblog-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to AWS EC2
    needs: [build-frontend, build-docker]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: public/build/
      
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            echo "🚀 開始 AWS EC2 部署..."
            
            # 進入專案目錄
            cd ~/aaronblog
            
            # 建立備份
            echo "📦 建立前端資源備份..."
            if [ -d "public/build" ]; then
              cp -r public/build public/build.backup.$(date +%Y%m%d-%H%M%S)
            fi
            
            # 創建必要的目錄結構
            echo "📁 確保目錄結構正確..."
            mkdir -p storage/database  # SQLite 數據庫直接存放位置
            mkdir -p storage/logs
            mkdir -p storage/framework/{cache,sessions,views}
            mkdir -p storage/app
            
            # 設置正確的權限（AWS EC2 優化）
            echo "🔐 設置檔案權限..."
            sudo chown -R $USER:$USER ~/aaronblog
            chmod -R 755 ~/aaronblog
            chmod -R 775 ~/aaronblog/storage
            chmod -R 775 ~/aaronblog/bootstrap/cache
            
            # 拉取最新程式碼
            echo "📥 拉取最新程式碼..."
            git config core.filemode false
            git reset --hard origin/main
            git pull origin main
            
            # 拉取最新 Docker image
            echo "🐳 拉取最新 Docker image..."
            docker pull aaronlei17/aaronblog-app:latest
      
      - name: Upload frontend assets
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          source: "public/build/"
          target: "~/aaronblog/public/"
          strip_components: 1
      
      - name: Restart services and health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            echo "🔄 重啟 AWS EC2 服務..."
            cd ~/aaronblog
            
            # 停止現有服務
            docker-compose -f docker-compose.prod.yml down
            
            # 清理未使用的 Docker 資源（AWS EC2 磁盤空間優化）
            docker system prune -f
            
            # 啟動新服務
            docker-compose -f docker-compose.prod.yml up -d
            
            # 等待服務啟動
            echo "⏳ 等待服務啟動..."
            sleep 15
            
            # 簡單健康檢查
            echo "🏥 檢查服務狀態..."
            
            # 檢查容器是否啟動
            if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "✅ 容器啟動成功"
              
              # 簡單 HTTP 檢查
              if curl -f http://localhost:80 > /dev/null 2>&1; then
                echo "✅ 網站服務正常"
                echo "🎉 AWS EC2 部署成功！"
                
                # 清理舊備份（只保留1個）
                find ~/aaronblog/public -name "build.backup.*" -type d | sort -r | tail -n +2 | xargs rm -rf 2>/dev/null || true
                
              else
                echo "⚠️  HTTP 檢查異常，但容器已啟動"
                echo "🔍 請手動檢查網站狀態"
              fi
            else
              echo "❌ 容器啟動失敗！"
              docker-compose -f docker-compose.prod.yml logs --tail=50
              exit 1
            fi

  notify:
    name: Notify Success
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Notify deployment success
        run: |
          echo "🎉 AWS EC2 部署成功！"
          echo "✅ 測試通過"
          echo "✅ 前端構建完成"
          echo "✅ Docker 映像構建完成"
          echo "✅ 部署到 AWS EC2 成功"
          echo "📅 部署時間: $(date)"
          echo "🏷️  Docker Tag: aws-latest"

  notify-failure:
    name: Notify Failure
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Send failure notification
        run: |
          echo "❌ AWS EC2 部署失敗！"
          echo "🕐 時間: $(date)"
          echo "📝 提交: ${{ github.sha }}"
          echo "🌿 分支: ${{ github.ref_name }}"
          echo "👤 作者: ${{ github.actor }}"
          echo "🔍 失敗原因: 請檢查上述步驟的日誌"